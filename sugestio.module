<?php

// $Id$

/**
 * Implementation of hook_menu.
 */
function sugestio_menu() {
  $items = array();
  
  $items['admin/settings/sugestio'] = array(
    'title' => 'Sugestio settings',
    'description' => 'Tweak some options of the Sugestio module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
	  'sugestio_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Implementation of hook_settings.
 */
function sugestio_admin_settings() {
  $form = array();
 
  $form['sugestio_account'] = array(
    '#type' => 'textfield',
	'#size' => 15,
	'#title' => t('Account name'),
	'#description' => t('Your Sugestio account name.'),
	'#default_value' => variable_get('sugestio_account',''),
  );
  
  $form['sugestio_key'] = array(
    '#type' => 'textfield',
	'#title' => t('Secret key'),
	'#size' => 15,
    '#default_value' => variable_get('sugestio_key', ''),
	'#description' => t('Your Sugestio secret key. This key will be used to authenticate and encrypt communication with the external Sugestio recommendation engine.'),
  );
  
  $form['sugestio_url'] = array(
    '#type' => 'textfield',
	'#default_value' => variable_get('sugestio_url','http://api.sugestio.com'),
	'#title' => 'Sugestio URL',
	'#description' => t('The URL of the external Sugestio recommendation engine. Remove any trailing /.'),
  );
  
  $form['sugestio_number_recs'] = array(
    '#type' => 'textfield',
	'#title' => 'Number of recommended items',
	'#size' => 15,
	'#description' => t('The number of recommended items that should be fetched. This affects both the number of recommended items that will be fetched from the external Sugestio recommendation engine as the number of items that will be shown in the standard Sugestio Recommended Items block. Enter a value from the interval [1,100].'),
	'#default_value' => variable_get('sugestio_number_recs',5),
  );
  
  $form['sugestio_expire'] = array(
    '#type' => 'textfield',
	'#title' => 'Cache expire time',
	'#size' => 15,
	'#default_value' => variable_get('sugestio_expire',24),
	'#description' => t('The maximum time (in hours) the recommendations can be stored in the cache. After this period the recommendations will be refetched from the external Sugestio recommendation egine. Enter a value from the interval [1,48].'),
  );
  
  $form['sugestio_rec_cache'] = array(
    '#type' => 'checkbox',
	'#title' => 'Use recommendation cache',
	'#default_value' => variable_get('sugestio_rec_cache',1),
	'#description' => t('Enables the cache for the recommendations. Recommendations will be fetched from cache first before calling the external Sugestio recommendation engine. Disabling this is only recommended for testing purposes.'),
  );
  
  $form['sugestio_realtime_hook'] = array(
    '#type' => 'checkbox',
	'#title' => 'Send realtime hook events',
	'#default_value' => variable_get('sugestio_realtime_hook',1),
	'#description' => t('Allows the hook events to be send in realtime to the external Sugestio recommendation engine. A hook events is for example triggered when a new user, item or vote is added to the system. If disabled, these events will be stored in (non-expiring) cache to be executed when cron is run. This can be disabled for performance reasons.'),
  );
  
  $form['sugestio_clicktracking'] = array(
    '#type' => 'checkbox',
    '#title' => 'Allow click tracking',
    '#default_value' => variable_get('sugestio_clicktracking',1),
    '#description' => t('If click tracking is enabled, javascript code will be inserted into the generated recommended items links. When clicked, client side calls will be made in the background to the external Sugestio recommendation engine to report this click. By gathering this information the external Sugestio recommendation engine can provide more extensive and relevant statistics about the generated recommendations.'),
  );
  
  return system_settings_form($form);
}

/**
 * Implementaion of hook_validate().
 */
function sugestio_admin_settings_validate($form, &$form_state) {
  //Number of items between 1 and 100.
  $num = $form_state['values']['sugestio_number_recs'];
  if (!is_numeric($num)) {
    form_set_error('sugestio_number_recs',t('You must enter an integer value.'));
  }
  else if ($num < 1 || $num > 100) {
    form_set_error('sugestio_number_recs',t('You must enter an integer value in the interval [1,100].'));
  }
  
  //Secret key maximum length.
  $key = $form_state['values']['sugestio_key'];
  if (strlen($key) > 50) {
    form_set_error('sugestio_key',t('Your secret key is too long.'));
  }
  
  //No empty account name.
  $account = $form_state['values']['sugestio_account'];
  if ($account == '') {
    form_set_error('sugestio_account',t('Account name can\'t be empty.'));
  }
  //Maximum length account name.
  else if (strlen($account) > 50) {
    form_set_error('sugestio_account',t('Your account name is too long.'));
  }
  
  //Expire time numeric and between 1 and 48
  $expire = $form_state['values']['sugestio_expire'];
  if (!is_numeric($expire) || $expire < 0 || $expire > 48) {
    form_set_error('sugestio_expire',t('The cache expire time should be between 1 and 48.'));
  }  
}

/**
 * Implements hook_block()
 *
 * @param delta
 *   Allows to specify whether the personal recommendations for a user
 *   (delta=0) should be shown or similar sheets (delta=1).
 */
function sugestio_block($op = 'list', $delta = 0, $edit = array()) {

  if ($op == 'list') {
    $blocks[0]['info'] = '[Sugestio]: Personal recommendations';
	$blocks[1]['info'] = '[Sugestio]: Similar items';
    return $blocks;
  }
  elseif ($op == 'view') {

    switch ($delta) {
      case 0:
        //Shows personal user recommendations for the current user.
	    global $user;
	    $block['subject'] = 'Personal recommendations';
	    $block['content'] = theme_sugestio_list_items(sugestio_get_user_recommendations($user->uid), 'rec');       
	    return $block;
		break;
		
      case 1:
        //Shows similar items for the current node.
        $nid = -1;
        if (arg(0) == 'node' && is_numeric(arg(1))) {
          $nid = arg(1);
        }
        
  	    $block['subject'] = 'Similar items';
        $block['content'] = theme_sugestio_list_items(sugestio_get_similar_items($nid), 'similar');
	    return $block;
		break;
    }
  }
}

/**
 * Retrieves the recommendations for the given user.
 *
 * They will be fetched from cache if available and
 * allowed by the settings. Otherwise the results
 * will come directly from the external Sugestio engine.
 *
 * @param uid 
 *   The id of the user.
 *
 * @return 
 *   An associative array containing the recommendations.
 *   [['itemid' => 'ID_OF_FETCHED_ITEM_1'],['itemid' => 'ID_OF_FETCHED_ITEM_2'],['itemid' => 'ID_OF_FETCHED_ITEM_3'],...]
 */
function sugestio_get_user_recommendations($uid) {
  $recommendations = sugestio_fetch_data($uid,'user');
  return $recommendations;
}

/**
 * Retrieves the similar items.
 *
 * They will be fetched from cache if available and
 * allowed by the settings. Otherwise the results
 * will come directly from the external Sugestio engine.
 *
 * @param $itemid
 *   The id of the item.
 *
 * @return
 *   An associative array containing the similar items.
 *   [['itemid' => 'ID_OF_FETCHED_ITEM_1'],['itemid' => 'ID_OF_FETCHED_ITEM_2'],['itemid' => 'ID_OF_FETCHED_ITEM_3'],...]
 */
function sugestio_get_similar_items($itemid) {
  $similar = sugestio_fetch_data($itemid,'item');
  return $similar;
}

/**
 * Fetches data from the external Sugestio recommendation engine or 
 * from cache if available and allowed by the settings.
 *
 * Data can be both recommended items for a given user and similar
 * items for a given item.
 *
 * @param id
 *   The id of the user or item for which the recommended or similar
 *   items must be fetched.
 *
 * @param category
 *   The category of the data that should be fetched. This can be 'user' if
 *   user recommendations are required or 'item' if the similar items must be fetched.
 *
 * @return
 *   An associative array structured as follows
 *   [['itemid' => 'ID_OF_FETCHED_ITEM_1'],['itemid' => 'ID_OF_FETCHED_ITEM_2'],['itemid' => 'ID_OF_FETCHED_ITEM_3'],...]
 */
function sugestio_fetch_data($id, $category) {
  $data = array();
  if (empty($id)) {
    return $data;
  }
  
  //Fetches data from cache if allowed by the settings.
  if (variable_get('sugestio_rec_cache', 1) == 1){ 
    $cache = cache_get($category . $id, 'cache_sugestio');
    if (!empty($cache->data)) {
      $data = $cache->data;
    }
  }
  //Fetches data from the external Sugestio recommendation engine.
  if (empty($data)) {
    $controller = sugestio_get_controller();
    try {
      //For user recommendations.
      if ($category == 'user') {
        $return = $controller->getRecommendationsJson($id);
      }
      //For item similarities (recommendations).
      else if ($category == 'item') {
        $return = $controller->getSimilarJson($id);
      }
      $alldata = json_decode($return);
	  if (!empty($alldata)) {
        $number_items = variable_get('sugestio_number_recs', 5);
        $count = 0;
        foreach ($alldata as $item) {
          if ($count >= $number_items) {
            break;
		  }
		  if (!empty($item->itemid[0])) {
            $itemid = $item->itemid[0];
            $data[] = array('itemid' => $itemid);
           
		    $count ++;
          }
        }
        //Caches the result for easy access next time.
        cache_set($category . $id, $data,  'cache_sugestio', mktime(variable_get('sugestio_expire', '24')));
	  }
    }
    catch(Exception $e) {
      sugestio_error($e);
	}
  }
  
  return $data;
}

/**
 * Implementation of hook_user().
 */
function sugestio_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      sugestio_hooks($op, &$account, 'user');
      break;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function sugestio_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      sugestio_hooks($op, &$node, 'node');
      break;
  }
}

/**
 * Implementation of hook_votingapi_insert().
 */
function sugestio_votingapi_insert($vote) {
  sugestio_hooks('insert', $vote, 'vote');
}

/**
 * Implementation of hook_votingapi_update().
 */
function sugestio_votingapi_update($vote, $new_value) {
  sugestio_hooks('update', $new_value, 'vote');
}

/**
 * Implementation of hook_votingapi_delete().
 */
function sugestio_votingapi_delete($vote) {
  //Is currently not supported in the external Sugestio recommendation engine.
}

/**
 * Collects all the hooks that this module catches and
 * passes them on to the external Sugestio recommendation egine.
 *
 * Depending on the settings this will be done in realtime, 
 * or cached to be executed when cron is run.
 *
 * @param op
 *   The operation linked with the hook, for example 'insert' or 'update'
 *
 * @param data
 *   The data that comes with the hook. For example node, account or 
 *   vote information.
 *
 * @param hook
 *   A one word discription of the hook. This can be 'user', 'node' or 'vote'.
 */
function sugestio_hooks($op, $data, $hook) {
  if (variable_get('sugestio_realtime_hook', 1) == 1) {
    try {
      switch ($hook) {
        case 'user':
          $res = sugestio_user_execute($op, $data);
          break;
        case 'node':
          $res = sugestio_node_execute($op, $data);
          break;
        case 'vote':
          $res = sugestio_vote_execute($op, $data);
          break;
      }
      if ($res != 202) {
        throw new Exception("Error $hook operation $op. Response code: $res");
      }
      //All went well. No caching of the call needed, so we return.
      return;
    } 
    catch(Exception $e) {
      sugestio_error($e);
      //If the execution fails, the call will be saved in cache.
    }
  }
      
  //Adds call to the Sugestio call cache.
  $arr = array('data' => array('op' => $op, 'data' => $data), 'event' => $hook);
  drupal_write_record('cache_sugestio_calls', $arr);
}

/**
 * Sends the user operation triggered by the hook to 
 * the external Sugestio recommendation engine.
 *
 * This method should NOT be called directly. All hook events
 * must pass through sugestio_hooks() to ensure correct cache
 * behaviour.
 *
 * @param op
 *   The operation linked with the hook.
 *
 * @param account
 *   The account object that identifies the user that triggered
 *   the hook.
 */
function sugestio_user_execute($op, $account) {
  switch ($op) {
    case 'insert':
    case 'update':
      $cont = sugestio_get_controller();
      
      /*
      * Using the md5 hash of the e-mail of the user as the userid makes the data anonymous. 
      * Note that md5 hash of the userid would be too easy to reverse lookup.
      */
      
      $userid = md5($account->mail);
      $location_simple = '';
      $location_latlong = '';
      $gender = '';
      $birthday = '';
     
      return $cont->addUser($userid, $location_simple, $location_latlong, $gender, $birthday);
      break;
  }
}

/**
 * Sends the node operation triggered by the hook to 
 * the external Sugestio recommendation engine.
 *
 * This method should NOT be called directly. All hook events
 * must pass through sugestio_hooks() to ensure correct cache
 * behaviour.
 *
 * @param op
 *   The operation linked with the hook.
 *
 * @param node
 *   The node object that triggered the hook.
 */
function sugestio_node_execute($op, $node) {
  switch ($op) {
    case 'insert':
    case 'update':
      $cont = sugestio_get_controller();
      
      $id = $node->nid;
      $from = $node->created;
      $until = '';
      $location_simple = '';
      $location_latlong = '';
      $creator = '';
      $tag = '';
      $category = '';
      
      return $cont->addItem($id, $from, $until, $location_simple, $location_latlong, $creator, $tag, $category);
      break;
  }
}

/**
 * Sends the vote operation triggered by the hook to 
 * the external Sugestio recommendation engine.
 *
 * This method should NOT be called directly. All hook events
 * must pass through sugestio_hooks() to ensure correct cache
 * behaviour.
 *
 * @param op
 *   The operation linked with the hook.
 *
 * @param vote
 *   The vote object that triggered
 *   the hook.
 */
function sugestio_vote_execute($op, $vote) {
  //Unwraps the vote.
  $vote = $vote[0];
  switch ($op){
    case 'insert':
    case 'update':
      $cont = sugestio_get_controller();
      
      $userid = $vote['uid'];
      $itemid = $vote['content_id'];
      $type = 'RATING';
      if ($vote['value_type'] == 'percent') {
        $detail = 'PERCENTAGE:' . $vote['value'];
      }
      else {
        /*
         * Generic way of passing the ratings. 
         * Do try to map these on the specific API of the external 
         * Sugestio recommendation engine!
         */
        $detail = $vote['value_type'] . ':' . $vote['value'];
      }
      $date = $vote['timestamp'];
      $location_simple = '';
      $location_latlong = '';
      
      return $cont->addConsumption($userid, $itemid, $type, $detail, $date, $location_simple, $location_latlong);
      break;
  }
}

/**
* Implementation of hook_cron().
*
* When cron is run, the hook calls that were saved in DB
* will be sent to the external Sugestio recommendation engine. 
*/
function sugestio_cron() {
  //Reads call cache.
  $result = db_query('SELECT * FROM cache_sugestio_calls');
  
  while ($call = db_fetch_object($result)) {
    //Unpacks the data stored in the call.
    $arr = unserialize($call->data);
    $op = $arr['op'];
    $data = $arr['data'];
    try {
      //Executes the call.
      if ($call->event == 'user') {
        $res = sugestio_user_execute($op, $data);
      }
      else if ($call->event == 'node') {
        $res = sugestio_node_execute($op, $data);
      }
      else if ($call->event == 'vote') {
        $res = sugestio_vote_execute($op, $data);
      }
      
      //Deletes the call entry from DB if succesful.
      if ($res == 202) {
        db_query("DELETE FROM cache_sugestio_calls WHERE cid=%d", $call->cid);
      }
    } 
    catch (Exception $e) {
      sugestio_error($e);
    }
  }
}

/**
* Transforms the given array of recommendations
* into a simple HTML styled bullet list.
*
* If clicktracking is enabled, it is added to the
* generated links.
* <ul>
*   <li>
*     <a ... onclick=clicktracking> recommended item </a>
*   </li>
* </ul>
* 
* @param arr
*   The array of recommendations.
* 
* @param type
*   The type of the recommendations. Can be 'rec' for user recommendations
*   or 'similar' for similar item recommendations. This variable is passed
*   on to the external Sugestio recommendation engine through clicktracking.
*/
function theme_sugestio_list_items($arr, $type) {
  $begin = '<ul>';
  $middle = '';
  $end = '</ul>';
  
  $count = 0;
  $max_items = variable_get('sugestio_number_recs', 5);
  global $user ;
  $uid = $user->uid;
  
  foreach ($arr as $rec) {
    if (!empty($rec['itemid'])){
      if ($count >= $max_items) {
        break;
      }
      
      $itemid =  $rec['itemid'];
      $title = $itemid; //Insert something more useful if available.
      $tracking = '';
      
      //Inserts clicktacking if allowed.
      if (variable_get('sugestio_clicktracking', 1) == 1) {
        $tracking = 'onclick="javascript:sugestio_clicked(\'' . $itemid . '\',\'' . $uid . '\',\'view:' . $type . '\',\'' . variable_get('sugestio_url','http://api.sugestio.com') .'\',\'' . variable_get('sugestio_account','') . '\')"';
        
        //Imports the required javascript file.
        $module_path = drupal_get_path('module', 'sugestio');
        drupal_add_js($module_path . "/tracking.js");
      }
      
      //Puts the pieces together.
      $middle .= '<li><a href="node/' . $itemid . '" ' . $tracking . '>' . $title . '</a></li>';
      
      $count ++;
    }
  }
  
  return $begin . $middle . $end;
}

/**
 * Reports errors that are caught during execution.
 */
function sugestio_error($e) {
  //Keeping the message translatable...
  watchdog('warning', t('Sugestio problem: @e', array('@e' => $e->getMessage())));
}

/**
 * Returns a Controller object that interfaces with 
 * the external Sugestio recommendation engine.
 */
function sugestio_get_controller() {
  require_once('lib/Controller.php');
  $cont = new Controller(variable_get('sugestio_account',''), variable_get('sugestio_key', ''), variable_get('sugestio_url','http://api.sugestio.com'));
  return $cont;
}